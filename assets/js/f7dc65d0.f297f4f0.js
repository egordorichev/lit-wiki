"use strict";(self.webpackChunklit_wiki=self.webpackChunklit_wiki||[]).push([[617],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var a=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,r=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=c(n),m=s,h=d["".concat(l,".").concat(m)]||d[m]||p[m]||r;return n?a.createElement(h,i(i({ref:t},u),{},{components:n})):a.createElement(h,i({ref:t},u))}));function m(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=n.length,i=new Array(r);i[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:s,i[1]=o;for(var c=2;c<r;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7976:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return o},metadata:function(){return c},toc:function(){return p}});var a=n(7462),s=n(3366),r=(n(7294),n(3905)),i=["components"],o={},l="Classes",c={unversionedId:"getting_started/classes",id:"getting_started/classes",title:"Classes",description:"Everything in lit is an instance of some class. Functions are instances of Function class,",source:"@site/docs/0_getting_started/5_classes.md",sourceDirName:"0_getting_started",slug:"/getting_started/classes",permalink:"/lit-wiki/docs/getting_started/classes",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/0_getting_started/5_classes.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Functions",permalink:"/lit-wiki/docs/getting_started/functions"},next:{title:"Fibers",permalink:"/lit-wiki/docs/getting_started/fibers"}},u={},p=[{value:"Defining a class",id:"defining-a-class",level:2},{value:"Creating an instance",id:"creating-an-instance",level:2},{value:"Fields",id:"fields",level:2},{value:"Methods",id:"methods",level:2},{value:"Static fields",id:"static-fields",level:2},{value:"Super classes",id:"super-classes",level:2},{value:"Type checking",id:"type-checking",level:2},{value:"Operator overloading",id:"operator-overloading",level:2}],d={toc:p};function m(e){var t=e.components,n=(0,s.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"classes"},"Classes"),(0,r.kt)("p",null,"Everything in lit is an instance of some class. Functions are instances of ",(0,r.kt)("a",{parentName:"p",href:"/docs/modules/core_module/function"},"Function")," class,\nStrings are instances of ",(0,r.kt)("a",{parentName:"p",href:"/docs/modules/core_module/string"},"String")," class."),(0,r.kt)("p",null,"Classes describe instance methods."),(0,r.kt)("h2",{id:"defining-a-class"},"Defining a class"),(0,r.kt)("p",null,"Classes are created using the ",(0,r.kt)("inlineCode",{parentName:"p"},"class")," keyword:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"class Awesome {\n    \n}\n")),(0,r.kt)("p",null,"This defines a global variable with class Awesome in it."),(0,r.kt)("h2",{id:"creating-an-instance"},"Creating an instance"),(0,r.kt)("p",null,"To create an instance, call the class using the ",(0,r.kt)("inlineCode",{parentName:"p"},"new")," operator. You can also pass arguments to class constructor, like usual."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"var awesome = new Awesome()\nprint(awesome)\n")),(0,r.kt)("h2",{id:"fields"},"Fields"),(0,r.kt)("p",null,"Each object consists of fields. You can write and read from them with ease:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"var object = new Object()\nprint(object.prop) // null, it's not set yet\n\nobject.prop = 32\nprint(object.prop) // 32\n")),(0,r.kt)("p",null,"Sometimes you need to set a lot of fields when creating an object, so there is a handy shortcut for that:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'var object = new Object() {\n    propA: 32,\n    propB: "test"\n}\n\nprint(object.propB + object.propA)\n')),(0,r.kt)("h2",{id:"methods"},"Methods"),(0,r.kt)("p",null,"Objects field can be a function. You can assign a function to a field by hand, but it's better to do so when defining the class:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'class Better {\n    greet(who) {\n        print($"Hello, {who}!")\n    }\n}\n\nnew Better().greet("Egor")\n')),(0,r.kt)("p",null,"This way all the objects share a single method instance, so it's more memory efficient.\nYou can also access the objects fields inside of methods using ",(0,r.kt)("inlineCode",{parentName:"p"},"this")," keyword:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'class Person {\n    constructor(age) {\n        this.age = age\n    }\n    \n    greet() {\n        print($"Hello, I\'m {this.age} years old")\n    }\n}\n\nnew Person(42).greet()\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"constructor")," is a special method name, it defines a method that will be called upon creating an instance of the class,\nand it receives all the arguments that you pass to the ",(0,r.kt)("inlineCode",{parentName:"p"},"new")," expression."),(0,r.kt)("h2",{id:"static-fields"},"Static fields"),(0,r.kt)("p",null,'While objects have their own fields, that they do not share, classes have their own "static" fields. They are defined\nright in the class statement:'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'class ImRunningOutOfNames {\n    static var name = "Pumba"\n}\n\nImRunningOutOfNames.value = 32\n\nprint(ImRunningOutOfNames.name, ImRunningOutOfNames.value)\n')),(0,r.kt)("h2",{id:"super-classes"},"Super classes"),(0,r.kt)("p",null,"Classes can extend each other, inheriting super class methods:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'class Animal {\n    constructor(sound) {\n        this.sound = sound\n    }\n    \n    makeSound() {\n        print(this.sound)\n    }\n}\n\nclass Cat : Animal {\n    constructor() {\n        super("meow")\n    }\n    \n    makeSound() {\n        super.makeSound()\n        super.makeSound()\n    }\n}\n\nvar cat = new Cat()\ncat.makeSound() // meow, meow\n')),(0,r.kt)("p",null,"Note the use of the ",(0,r.kt)("inlineCode",{parentName:"p"},"super")," keyword to call versions of methods defined in the super class."),(0,r.kt)("h2",{id:"type-checking"},"Type checking"),(0,r.kt)("p",null,"Sometimes you need to identify variables type, and what better way to do that then with the ",(0,r.kt)("inlineCode",{parentName:"p"},"is")," operator!\nIt takes your variable and any class, and tells you if the variable is an instance of that class."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"print(10 is Number) // true\nprint(new Map() is Object) // true\nprint(null is String) // false\n")),(0,r.kt)("h2",{id:"operator-overloading"},"Operator overloading"),(0,r.kt)("p",null,"And for the desert, let's talk operator overloading. In short, it's a concept that allows you to define how your object behaves\nwhen used with an operator. Let's look at an example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'class Vector {\n    constructor(x, y) {\n        this.x = x\n        this.y = y\n    }\n    \n    print() {\n        print($"({this.x}, {this.y})")\n    }\n    \n    operator + (v) {\n        return new Vector(this.x + v.x, this.y + v.y)\n    }\n}\n\nvar vector = new Vector(10, 32) + new Vector(1, 3)\nvector.print()\n')),(0,r.kt)("p",null,"In this example, the class ",(0,r.kt)("inlineCode",{parentName:"p"},"Vector")," defines its behaviour when used with the plus binary operator."))}m.isMDXComponent=!0}}]);