"use strict";(self.webpackChunklit_wiki=self.webpackChunklit_wiki||[]).push([[1],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return f}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=c(r),f=a,b=d["".concat(s,".").concat(f)]||d[f]||p[f]||i;return r?n.createElement(b,l(l({ref:t},u),{},{components:r})):n.createElement(b,l({ref:t},u))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,l=new Array(i);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var c=2;c<i;c++)l[c]=r[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},9692:function(e,t,r){r.r(t),r.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return f},frontMatter:function(){return o},metadata:function(){return c},toc:function(){return p}});var n=r(7462),a=r(3366),i=(r(7294),r(3905)),l=["components"],o={},s="Variables",c={unversionedId:"getting_started/variables",id:"getting_started/variables",title:"Variables",description:"Variables are basically named registers, that can hold a value. You can define new variable using the var statement:",source:"@site/docs/0_getting_started/2_variables.md",sourceDirName:"0_getting_started",slug:"/getting_started/variables",permalink:"/lit-wiki/docs/getting_started/variables",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/0_getting_started/2_variables.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Values",permalink:"/lit-wiki/docs/getting_started/values"},next:{title:"Control flow",permalink:"/lit-wiki/docs/getting_started/control_flow"}},u={},p=[{value:"Globals",id:"globals",level:3},{value:"Privates",id:"privates",level:3}],d={toc:p};function f(e){var t=e.components,r=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"variables"},"Variables"),(0,i.kt)("p",null,"Variables are basically named registers, that can hold a value. You can define new variable using the var statement:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"var sum = 10 + 3\n")),(0,i.kt)("p",null,"This creates a new variable in the current scope and initializes it with the result of executing the expressions on the right of ",(0,i.kt)("inlineCode",{parentName:"p"},"="),".\nOnce you define a variable, you can access it by its name, until it leaves the current scope:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'var cake = "brownie"\nprint(cake) // brownie\n\ncake = "apple pie"\nprint(cake) // apple pie\n')),(0,i.kt)("h3",{id:"globals"},"Globals"),(0,i.kt)("p",null,"If you try to write to a variable, that is not directly declared in the current scope, lit will modify global variables."),(0,i.kt)("h3",{id:"privates"},"Privates"),(0,i.kt)("p",null,"Top-level module variables are called privates and are accessible by their names via their names:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'var a = 32 + 2\nvar b = "test"\n\n// Note, that d is already in that map, even tho it was not initializated yet!\nprint(Module.privates) // { _module = Module tests.examples.modules, d = null, a = 34, b = test }\n\nvar d = 48\n')))}f.isMDXComponent=!0}}]);