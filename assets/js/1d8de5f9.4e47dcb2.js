"use strict";(self.webpackChunklit_wiki=self.webpackChunklit_wiki||[]).push([[811],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return c}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var u=a.createContext({}),d=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=d(e.components);return a.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,u=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),m=d(n),c=i,h=m["".concat(u,".").concat(c)]||m[c]||p[c]||r;return n?a.createElement(h,l(l({ref:t},s),{},{components:n})):a.createElement(h,l({ref:t},s))}));function c(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=m;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var d=2;d<r;d++)l[d]=n[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5976:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return u},default:function(){return c},frontMatter:function(){return o},metadata:function(){return d},toc:function(){return p}});var a=n(7462),i=n(3366),r=(n(7294),n(3905)),l=["components"],o={},u="Math",d={unversionedId:"modules/math_module/math",id:"modules/math_module/math",title:"Math",description:"Static fields",source:"@site/docs/modules/math_module/math.md",sourceDirName:"modules/math_module",slug:"/modules/math_module/math",permalink:"/lit-wiki/docs/modules/math_module/math",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/modules/math_module/math.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Math module",permalink:"/lit-wiki/docs/modules/math_module/"},next:{title:"Random",permalink:"/lit-wiki/docs/modules/math_module/random"}},s={},p=[{value:"Static fields",id:"static-fields",level:2},{value:"Pi",id:"pi",level:3},{value:"Tau",id:"tau",level:3},{value:"Static methods",id:"static-methods",level:2},{value:"abs(x)",id:"absx",level:3},{value:"sin(x)",id:"sinx",level:3},{value:"cos(x)",id:"cosx",level:3},{value:"tan(x)",id:"tanx",level:3},{value:"asin(x)",id:"asinx",level:3},{value:"acos(x)",id:"acosx",level:3},{value:"atan(x)",id:"atanx",level:3},{value:"atan2(x, y)",id:"atan2x-y",level:3},{value:"floor(x)",id:"floorx",level:3},{value:"ceil(x)",id:"ceilx",level:3},{value:"round(x)",id:"roundx",level:3},{value:"min(a, b)",id:"mina-b",level:3},{value:"max(a, b)",id:"maxa-b",level:3},{value:"mid(a, b, c)",id:"mida-b-c",level:3},{value:"toRadians(x)",id:"toradiansx",level:3},{value:"toDegrees(x)",id:"todegreesx",level:3},{value:"sqrt(x)",id:"sqrtx",level:3},{value:"log(x)",id:"logx",level:3},{value:"exp(x)",id:"expx",level:3}],m={toc:p};function c(e){var t=e.components,n=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"math"},"Math"),(0,r.kt)("h2",{id:"static-fields"},"Static fields"),(0,r.kt)("h3",{id:"pi"},"Pi"),(0,r.kt)("p",null,"Equals to math constant pi."),(0,r.kt)("h3",{id:"tau"},"Tau"),(0,r.kt)("p",null,"Equals to two pi."),(0,r.kt)("h2",{id:"static-methods"},"Static methods"),(0,r.kt)("h3",{id:"absx"},"abs(x)"),(0,r.kt)("p",null,"Returns ",(0,r.kt)("inlineCode",{parentName:"p"},"x")," value without the sign (absolute value)."),(0,r.kt)("h3",{id:"sinx"},"sin(x)"),(0,r.kt)("p",null,"Returns the value of math function ",(0,r.kt)("inlineCode",{parentName:"p"},"sin")," for the given argument ",(0,r.kt)("inlineCode",{parentName:"p"},"x"),"."),(0,r.kt)("h3",{id:"cosx"},"cos(x)"),(0,r.kt)("p",null,"Returns the value of math function ",(0,r.kt)("inlineCode",{parentName:"p"},"cos")," for the given argument ",(0,r.kt)("inlineCode",{parentName:"p"},"x"),"."),(0,r.kt)("h3",{id:"tanx"},"tan(x)"),(0,r.kt)("p",null,"Returns the value of math function ",(0,r.kt)("inlineCode",{parentName:"p"},"tan")," for the given argument ",(0,r.kt)("inlineCode",{parentName:"p"},"x"),"."),(0,r.kt)("h3",{id:"asinx"},"asin(x)"),(0,r.kt)("p",null,"Returns the value of math function ",(0,r.kt)("inlineCode",{parentName:"p"},"asin")," for the given argument ",(0,r.kt)("inlineCode",{parentName:"p"},"x"),"."),(0,r.kt)("h3",{id:"acosx"},"acos(x)"),(0,r.kt)("p",null,"Returns the value of math function ",(0,r.kt)("inlineCode",{parentName:"p"},"acos")," for the given argument ",(0,r.kt)("inlineCode",{parentName:"p"},"x"),"."),(0,r.kt)("h3",{id:"atanx"},"atan(x)"),(0,r.kt)("p",null,"Returns the value of math function ",(0,r.kt)("inlineCode",{parentName:"p"},"atan")," for the given argument ",(0,r.kt)("inlineCode",{parentName:"p"},"x"),"."),(0,r.kt)("h3",{id:"atan2x-y"},"atan2(x, y)"),(0,r.kt)("p",null,"Returns the value of math function ",(0,r.kt)("inlineCode",{parentName:"p"},"atan2")," for the given arguments ",(0,r.kt)("inlineCode",{parentName:"p"},"x")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"y"),".\nUseful for calculating angle of a vector."),(0,r.kt)("h3",{id:"floorx"},"floor(x)"),(0,r.kt)("p",null,"Returns the integer value of ",(0,r.kt)("inlineCode",{parentName:"p"},"x"),", rounding closer to ",(0,r.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,r.kt)("h3",{id:"ceilx"},"ceil(x)"),(0,r.kt)("p",null,"Returns the integer value of ",(0,r.kt)("inlineCode",{parentName:"p"},"x"),", rounding closer to ",(0,r.kt)("inlineCode",{parentName:"p"},"infinity"),"."),(0,r.kt)("h3",{id:"roundx"},"round(x)"),(0,r.kt)("p",null,"Returns the integer value of ",(0,r.kt)("inlineCode",{parentName:"p"},"x"),", rounding to the closest integer."),(0,r.kt)("h3",{id:"mina-b"},"min(a, b)"),(0,r.kt)("p",null,"Returns the smallest number between ",(0,r.kt)("inlineCode",{parentName:"p"},"a")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"b"),"."),(0,r.kt)("h3",{id:"maxa-b"},"max(a, b)"),(0,r.kt)("p",null,"Returns the biggest number between ",(0,r.kt)("inlineCode",{parentName:"p"},"a")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"b"),"."),(0,r.kt)("h3",{id:"mida-b-c"},"mid(a, b, c)"),(0,r.kt)("p",null,"Returns the number remaining number between the smallest and biggest in the arguments."),(0,r.kt)("h3",{id:"toradiansx"},"toRadians(x)"),(0,r.kt)("p",null,"Converts ",(0,r.kt)("inlineCode",{parentName:"p"},"x")," (in degrees) to radians."),(0,r.kt)("h3",{id:"todegreesx"},"toDegrees(x)"),(0,r.kt)("p",null,"Converts ",(0,r.kt)("inlineCode",{parentName:"p"},"x")," (in radians) to degrees."),(0,r.kt)("h3",{id:"sqrtx"},"sqrt(x)"),(0,r.kt)("p",null,"Returns the square root of ",(0,r.kt)("inlineCode",{parentName:"p"},"x"),"."),(0,r.kt)("h3",{id:"logx"},"log(x)"),(0,r.kt)("p",null,"Returns the logarithm of ",(0,r.kt)("inlineCode",{parentName:"p"},"x"),"."),(0,r.kt)("h3",{id:"expx"},"exp(x)"),(0,r.kt)("p",null,"Returns the exponent of ",(0,r.kt)("inlineCode",{parentName:"p"},"x"),"."))}c.isMDXComponent=!0}}]);