"use strict";(self.webpackChunklit_wiki=self.webpackChunklit_wiki||[]).push([[93],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=u(n),m=a,f=d["".concat(l,".").concat(m)]||d[m]||p[m]||i;return n?r.createElement(f,o(o({ref:t},c),{},{components:n})):r.createElement(f,o({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var u=2;u<i;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2275:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return p}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],s={},l="Syntax",u={unversionedId:"getting_started/syntax",id:"getting_started/syntax",title:"Syntax",description:"Lit is designed to look familiar to anyone, who touched any C-family language before. It resembles JavaScript a lot.",source:"@site/docs/0_getting_started/0_syntax.md",sourceDirName:"0_getting_started",slug:"/getting_started/syntax",permalink:"/lit-wiki/docs/getting_started/syntax",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/0_getting_started/0_syntax.md",tags:[],version:"current",sidebarPosition:0,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Getting started",permalink:"/lit-wiki/docs/getting_started/"},next:{title:"Values",permalink:"/lit-wiki/docs/getting_started/values"}},c={},p=[{value:"Comments",id:"comments",level:2},{value:"Identifiers",id:"identifiers",level:2},{value:"Reserved words",id:"reserved-words",level:2},{value:"Unary operators",id:"unary-operators",level:2},{value:"Binary operators",id:"binary-operators",level:2}],d={toc:p};function m(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"syntax"},"Syntax"),(0,i.kt)("p",null,"Lit is designed to look familiar to anyone, who touched any C-family language before. It resembles JavaScript a lot.\nPrograms are stored in files with the ",(0,i.kt)("inlineCode",{parentName:"p"},".lit")," extensions as plain text and executed from top to bottom."),(0,i.kt)("h2",{id:"comments"},"Comments"),(0,i.kt)("p",null,"When you want lit to ignore a line, we prefix it with a double slash:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"// This is a comment!\nvar a = 32 // This is a comment too\n")),(0,i.kt)("p",null,"When the comment gets big and spans multiple lines it's better to use multiline comment syntax:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"/*\n Look at me\n I'm multiline!\n */\n")),(0,i.kt)("h2",{id:"identifiers"},"Identifiers"),(0,i.kt)("p",null,"Naming rules are generally simple: identifiers start with a lowercase letter or underscore, and may include digits, characters and underscores.\nLit is case-sensitive."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"hello\ncamelCase\nPascalCase\nSEND_HELP\n")),(0,i.kt)("h2",{id:"reserved-words"},"Reserved words"),(0,i.kt)("p",null,"Some identifiers in lit are reserved for special syntax constructions, here are all of them:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"class, else, false, for, function, if, null, return, super,\nthis, true, var, while, continue, break, new, export, is,\nstatic, operator, get, set, in, const, ref\n")),(0,i.kt)("h2",{id:"unary-operators"},"Unary operators"),(0,i.kt)("p",null,"So let's finally do something useful - let's use some unary operators! Lit has a total of three, not, negation and binary not:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"print(!true)\nprint(-10)\nprint(~45)\n")),(0,i.kt)("h2",{id:"binary-operators"},"Binary operators"),(0,i.kt)("p",null,"If you find unary operators, you can be sure that binary operators are lurking somewhere nearby:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"print(2 + 2)\nprint(10 + 8 - 9 * 10 / 3)\nprint(10 >> 2 | 9 << (4 & 0xff) ^ 0xaa)\n")))}m.isMDXComponent=!0}}]);